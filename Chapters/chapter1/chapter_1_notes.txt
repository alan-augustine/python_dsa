Chapter-1
=============
page.4
temparature = 98.6
'temparature' is an identifier/name and 98.6 is an object (yes - 98.6 is an object - id(98.6) will show an address)


p.5
The semantics of a Python identifier is most similar to a reference variable in Java or a pointer variable in C++.
Each identifier is implicitly associated with the memory address of the object to which it refers
The methods/method calls and the references are stored in stack memory and all the values objects are stored in a private heap
ps: name 'heap' has nothing to do with heap data structure
Ref: https://www.geeksforgeeks.org/how-are-variables-stored-in-python-stack-or-heap/

Python is a dynamically typed language:
- as there is no advance declaration associating an identifier with a particular data type.
- Also, we can re-assign the identifier to an object of a same/different type
- Although identifier does not have a type, the object it refers to, have a type

p.6
temperature = 98.6 results in the creation of a new instance of the float class (literal form of instantiating a class)

methods chaging state of object     - mutators
methods NOT chaging state of object - accessors

p.7 - mutable and immutable, boolean
A class is immutable if each object of that class has a fixed value upon instantiation that cannot subsequently be changed.
ps: but identifier referencing that object can be reassigned to a different value.
mutable - list, set & dict (3)
immutable - int, float, string, tuple, frozentuple & boolean (6)

# immutable:
>>> original = 1
>>> copy = original
>>> id(original) == id(copy)
True
>>> # now original & copy are pointing to same 'Int' object with a value of 1
>>> # modify copy
    copy = copy + 1
>>>
>>> id(original) == id(copy)
False
# now original & copy are pointing to different 'Int' objects, showing object referenced by 'original' was not mutated by operation 'copy = copy + 1'
# A new object with new value got created and 'copy' was re-pointed to this new object


# mutable
demonstrating mutablility seems bit complicated,since the implementation of list is bit complex,  but below is one way:
>>> l = [22]
>>> m = l
>>> id(l) == id(m)
True
>>> id(l[0]) == id(m[0])
True
>>>
>>> m[0] = m[0] + 1
>>> id(l) == id(m)
True
>>> id(l[0]) == id(m[0])
True
ps: when we changed m, l also got changed ,since the operation mutated(changed value) of existing object,
instead of creating a new object

bool class:
- default constructor bool() returns false
- numbers evaluate to True if non-zero and False if zero (i.e, bool(2) is True)
- sequence and other container types like string/list - evalue to False if empty and True if non-empty





p.8 - int, float
Int class - represents integer value of arbitrary magnitude (i.e python does not have a short & long data-types)
a = 0b1011 # binary
b = 0o52 # octal
c = 0x7f # hexa-decimal

constructor int() retruns 0 by defaults
>>> int()
0
>>> int(3.14)
3
>>> int('1')
1

6.022e23 represents the mathematical value 6.022 Ã— 1023
>>> f = 6.022e23
>>> f
6.022e+23

P.9
Sequence types - order of elements are important - list, tuple, str 

List:
- mutable (eg: we can add elemnts to a list, do a[2] = 'new_value' etc.)
- list is a referential structure - it stores sequences of references to its elements 
- list() constructor will accept any parameter that is of 'iterable' type (string is an iterable type)

P.10
tuple - immutable 
str - immutable 

P.11
set class:
- elements are unordered (no index)
- highly optimized way of checking whether an element is present - due to internal use of hash tables 
- set is mutable (eg: we can add elemnts to a set)
- but elements should be of immutable types (so, we cannot hav a set with list as its elements)

dict class:
- constructor an accept a sequence of key value pairs 

P.12
a is b - is True is a & b have same identity (i.e a & b refers to same object)
== operator checks for equality of value

P.13
NIL

P.14
for // and % operations, Python will give results such that:
q*m + r =n
where , 1=n//m , r=n%m
when m +ve --> 0 <= r < m 
when m -ve --> m < r <= 0
so, 27 // -4 = -7
and 27 % -4  = -1

+ for sequences means concatenation
[2] * 4 = [2, 2, 2, 2]


P.15
slices --> half open iterval - start index included and stop index excluded 
All sequnces define comparision operations based on lexiographic order. So:
'a' < 'b' is True
[5, 6 ,7] < [5, 7] , because of entries at idex 1 (not index 0)
Also, refer various set operations in p.15

P.16
a=[1,2,3]
a=a+[4,5] # extends original list
a+= [6,7] # reassigns a to a new list 

P.17
1 <= x + y <= 10 is same as: ( 1 <= x +y ) and ( x + y <=10) , but value of +y is calculated only once 

P.18,19,20
NA

P.21
some advantages of for loop compared to while loop, in case of iterables:
  - no need to explicitly manage index
  - we can use for loop to iterate through sets and dicts, which are un-ordered and does not have indexings

P.22
NIL 

P.23
function - invoked without he context of a specific class or an instance of that class 
method - member function that is invoked on a specific object 

P.24
Without an explicit 'return' statement, functions will return 'None'

-formal parameters - in function signature
-actual parameters - objects sent by caller, when invokingt the function 
- study section 1.5.1 in detail 

P.25
study section 1.5.1 in detail

P.26
default paramater

P.27
- check out a nice technique used in range() function
- keyword paramter 

P.28
NIL, but study 

P.29
Bulit in functions

P.30 
print(a,b,c) --> non-strin argments will be displayed as str(arg)
i.e print("value =", 5) is valid
print('a',5,6,sep='AA', end='')

P.31
user_input = int(input('Enter a value: '))

P.32
study all file operations
fp.read() --> read 'remaining' contents of a readable file as a string 

P.33
Exceptions

P.34
Exceptions 

P.35
NIL 

P.36
try-except takes slighly more time than standard if-else checks

P.37
Exceptions are objects that can be examined when caught:
excet IOError as e:
    print('Unable to open file', e)

P.38
refer a nice technique mentioned in the book 

P.39
Iterator/Iterables 
Python uses lazy evaluation techniques in many places

P.40
list(iterable_item) produces a list 
Genartors - simialr to a function, but instead of returing a value, a yields 
staement is executed to indicate each element of the series.
Also check genertor creation example.

P.41
More about lazy evaluation and generators

P.42
Conditional expressions 

P.43
Comprehension

P.44
Automatic packing

P.45
Simulatenous assignments - all experssions in RHS are evaluated before any assignment 

P.46
Scopes and Namespaces
name resolution - process of determining value associated with an identifier 
picture - did not understand gpa, grades & major variables

P.47
first class object - instances of a type that can be:
  - assigned to an identifier
  - passed as a parameter
  - returned by a function 
functions & classes - first class objects
name of functions are also identifiers 

P.48
modules & imports

P.49
NIL

P.50
NIL 





To Study:
- creating iterable classes
- generators 
- keyword arguments



















